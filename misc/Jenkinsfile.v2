pipeline {
    agent any
    stages {
        stage ('Preparation') {
            steps {
               checkout scm
                script {
                    sh "git rev-parse --short HEAD > .git/commit-id"
                    commit_id = readFile('.git/commit-id').trim()
                }
            }
        }
        stage('test') {
            steps {
                script {
                    def myTestContainer = docker.image('node:4.6')
                    myTestContainer.pull()
                    myTestContainer.inside {
                        sh 'npm install --only=dev'
                        sh 'npm test'
                        exit 1
                    }
                }
            }
        }

        stage('test with a DB') {
            steps {
                script {
                    def mysql = docker.image('mysql').run("-e MYSQL_ALLOW_EMPTY_PASSWORD=yes") 
                    def myTestContainer = docker.image('node:4.6')
                    myTestContainer.pull()
                    myTestContainer.inside("--link ${mysql.id}:mysql") { // using linking, mysql will be available at host: mysql, port: 3306
                        sh 'npm install --only=dev' 
                        sh 'npm test'                     
                    }                                   
                    mysql.stop()
                }
            }
        }

       stage('docker build/push') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v2/', 'dockerhub') {
                        def app = docker.build("ndomi/docker-nodejs-demo:${commit_id}", '.').push()
                    }
                }
            }
       }
    }
    post {
        success {
            slackSend color: '#32cd32', channel: 'slack-jenkins', message: "Pipeline status Status-${currentBuild.currentResult} ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_URL}"
        }
        failure {
            slackSend color: '#FF0000', channel: 'slack-jenkins', message: "Pipeline status Status-${currentBuild.currentResult} ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_URL}"
        }
    }
}
